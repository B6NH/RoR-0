<h2>Active Record Associations</h2>

<ul>

  <li>
    <p>
      Association w RoR to połączenie między dwoma modelami Active Record. Dlaczego
      potrzebujemy asocjacji między modelami? Ponieważ sprawiają że wiele popularnych
      operacji jest dzięki nim łatwiejszych. Na przykład rozważmy prostą aplikację
      z modelami autora i książki. Każdy autor może mieć wiele książek. Bez
      asocjacji deklaracje modeli wyglądałyby w ten sposób. Załóżmy,  że chcemy
      dodać książkę do istniejącego autora. Należałoby przekazać obiektowi książki
      id konkretnego autora. W przypadku usuwania autora trzeba zadbać również o
      usunięcie jego książek. Z asocjacjami Active Record możemy ominąć te operacje
      przez przekazanie RoR informacji, że modele są połączone. Oto poprawiony
      program klas Author i Book. Dzięki tej zmianie tworzenie książki dla autora
      jest bardzo łatwe. Również łatwiejsze jest usuwanie autora. Więcej informacji
      o asocjacjach znajduje się w dalszej części przewodnika. Są tam również
      różne tricki i porady przydatne podczas działań związanych z asocjacjami
      a także kompletne odnośniki do metod i opcji dla asocjacji w RoR.
    </p>
  </li>

  <li>
    <p>
      RoR posiada 6 typów asocjacji - belongs_to, has_one, has_many, has_many :through,
      has_one :through, has_and_belongs_to_many. Asocjacje są zaimplementowane
      z użyciem wywołań w stylu makro, dzięki czemu można dodawać nowe funkcje
      do modelu w sposób deklaratywny. Na przykład poprzez zadeklarowanie, że
      jeden model belongs_to do innego informuje się o konieczności istnienia
      kluczy głównego i obcego i ich zależności. Dla modelu wygenerowane zostaną
      również różne przydatne funkcje. W pozostałej części poradnika znajdzie się
      informacja o tym jak deklarować i używać różnych form asocjacji. Najpierw
      jednak krótki wstęp i wyjaśnienie sytuacji, w których stosuje się poszczególne
      typy asocjacji. Asocjacja belongs_to ustala relację jeden do jednego z innym
      modelem w ten sposób, że każda instacja modelu należy do jednej instancji
      innego modelu. Na przykład jeżeli w aplikacji są autorzy i książki a każda
      może należeć do dokładnie jednego autora można napisać "belongs_to :author"
      w klasie książki. Asocjacja belongs_to musi używać rzeczownika w liczbie
      pojedynczej. Gdyby użyto formy mnogiej i napisano "Book.create(authors: @author)"
      zostałby wyświetlony błąd mówiący o nieistniejącej stałej Book::Authors.
      Dzieje się tak ponieważ RoR automatycznie wnioskuje nazwę klasy z nazwy
      w asocjacji. Jeżeli nazwa asocjacji jest źle spluralizowana, wywnioskowana
      klasa również będzie błędnie spluralizowana. W migracji można również użyć
      belongs_to, np "t.belongs_to :author". Asocjacja has_one również ustawia
      połączenie jeden do jednego z innym modelem, posiada jednak inną semantykę
      i konsekwencje. Ta asocjacja wskazuje, że każda instacja modelu posiada lub
      zawiera instancję innego modelu. Na przykład jeżeli każdy supplier posiada
      jedno konto można napisać "has_one :account". W zależności od sytuacji, może
      istnieć konieczność stworzenia unikalnego indexu i/lub ograniczeń klucza obcego
      w kolumnie supplier_id, np "t.belongs_to :supplier, index: { unique: true },
      foreign_key: true". Asocjacja has_many wskazuje na połączenie jeden do wielu
      z innym modelem. Ta asocjacja jest często używana po drugiej stronie asocjacji
      belongs_to. Wskazuje, że każda instajca modelu ma zero jub więcej instancji
      innego modelu. Na przykład w aplikacji z autorami i książkami w modelu autora
      można napisać "has_many :books". Nazwa modelu jest tu spluralizowana.
      Asocjacja has_many :through jest często używana do ustawienia relacji
      wiele do wielu. Informuje, że model może być połączony z jednym lub wieloma
      modelami przez trzeci model. Na przykład lekarz i pacjenci mogą umawiać się
      na wizyty. Potrzebne są trzy modele Physician Appointment i Patient. Kolekcja
      join modeli może być obsługiwana przez metody asocjacyjne has_many. Na przykład
      jeśli "physician.patients = patients", powstaną nowe join modele dla nowych
      połączonych obiektów. Jeżeli modele istniejące wcześniej zostały usunięte,
      odpowiadające im wiersze join zostaną również automatycznie usunięte.
      Automatyczne usuwanie join modeli jest bezpośrednie bez wywoływania destroy
      callbacków. Asocjacja has_many :through jest również przydatna do ustawiania
      skrótów przez zagnieżdżone asocjacje has_many. Na przykład jeżeli dokument
      ma wiele sekcji a każda sekcja ma wiele paragrafów lepiej mieć prostą kolekcję
      wszystkich paragrafów w dokumencie. Asocjacja has_one :through ustawia połączenie
      jeden do jednego z innym modelem. Wskazuje, że instancja modelu łączy się z
      jedną instancją innego modelu przez trzeci model. Na przykład jeżeli każdy
      supplier ma jedno konto i każde konto jest połączone z jedną historią konta.
      Asocjacja has_and_belongs_to_many tworzy bezpośrednie połączenie wiele do
      wielu z innym modelem, bez trzeciego modelu. Na przykład jeżeli aplikacja
      posiada assemblies i parts i każdy assembly ma wiele partsów a każdy part
      pojawia się w wielu assemblach. Jeżeli chce się ustawić relację jeden do
      jednego po jednej stronie musi być belongs_to a po drugiej has_one. Skąd
      wiadomo, który model powinien posiadać którą relację? To zależy od tego, w
      której tabeli istnieje klucz obcy. Jej model będzie miał relację belongs_to.
      Należy jednak zastanowić się również nad znaczeniem danych. Relacja has_one
      wskazuje że jedna rzecz należy do innej rzeczy. Na przykład większy sens
      ma supplier posiadający konto niż odwrotnie. Używanie "t.bigint :supplier_id"
      sprawia że nazwa klucza obcego jest oczywista i wyraźna. W obecnej wersji RoR
      można ukryć ten szczegół implementacji używając "t.references :supplier".
      RoR posiada dwie metody deklarowania relacji wiele do wielu między modelami.
      Łatwiejsza z nich to użycie metody has_and_belongs_to_many co tworzy
      bezpośrednie powiązanie. Druga metoda to has_many :through. Asocjacja tworzona
      jest pośrednio przez join model. Jeżeli model relacji jest traktowany jako
      oddzielny rekord należy użyć has_many :through. Jeżeli nie ma potrzeby
      korzystania z modelu relacji, łatwiej będzie użyć has_and_belongs_to_many.
      W tym przypadku konieczne będzie jednak również stworzenie odpowiedniej
      tabeli w bazie danych. Asocjacja has_many :through powinna być użyta jeżeli
      join model potrzebuje walidacji, callbacków lub dodatkowych atrybutów.
      Nieco bardziej zaawansowaną wersją asocjacji są polimorficzne asocjacje.
      Z polimorficznymi asocjacjami model może należeć do więcej niż jednego modelu
      w jednej asocjacji. Na przykład może istnieć model Picture należący do
      modelu Employee lub do modelu Product. W modelu Picture "belongs_to :imageable,
      polymorphic: true", a w modelach Employee i Product "has_many :pictures,
      as: :imageable". Polimorficzne belongs_to to ustawianie interfejsu, który
      może być używany przez jakikolwiek inny model. Z instancji modelu Employee
      można uzyskać kolekcję zdjęć @employee.pictures. Podobnie można użyć
      @product.pictures. Jeżeli istnieje instancja obiektu Picture, można dostać
      się do jego rodzica przez @picture.imageable. Aby to zadziałało konieczne
      jest zadeklarowanie kolumny klucza obcego i kolumny typu w modelu deklarującym
      polimorficzny interfejs, np "t.bigint  :imageable_id, t.string  :imageable_type".
      Migracja może być uproszczona przez użycie formy t.references. Należy napisać
      "t.references :imageable, polymorphic: true". Podczas projektowania modelu
      danych czasami pojawi się model, który powinien mieć relację do samego siebie.
      Na przykład może istnieć potrzeba przechowywania wszystkich pracowników w
      jednym modelu bazy danych z jednoczesną koniecznością śledzenia relacji, np
      między menadżerem a podwładnymi. Ta sytuacja może być modelowana z asocjacjami
      self-joining - "has_many :subordinates, class_name: "Employee",foreign_key:
      "manager_id", "belongs_to :manager, class_name: "Employee", optional: true".
      Z takimi ustawieniami można uzyskać @employee.subordinates i @employee.manager.
      W pliku migracji należy dodać kolumnę referencji do tabeli odpowiadającej
      modelowi Employee - "t.references :manager".
    </p>
  </li>

  <li>
    <p>
      Aby w skuteczny sposób korzystać z asocjacji Active Record dobrze jest
      wiedzieć o kilku rzeczach: kontrolowaniu cachingu, unikaniu kolizji nazw,
      updatowaniu schematu, kontrolowaniu zasięgu asocjacji i o asocjacjach
      dwukierunkowych. Wszystkie metody asocjacyjne są zbudowane wokół cachingu,
      który przechowuje wynik ostatnich zapytań dla przyszłych potrzeb. Cache
      jest współdzielone nawet między metodami. Na przykład 2 kolejne wywołania
      "author.books, author.books.size, author.books.empty?" będą korzystać z
      cache. Co jeśli trzeba przeładować cache, ponieważ dane mogły zostać
      zmienione przez inną część aplikacji? Wystarczy użyć metody reload, np
      "author.books, author.books.size, author.books.reload.empty?". Podczas
      tworzenia asocjacji nie ma pełnej dowolności wybierania nazw. Ponieważ
      nowa asocjacja to nowa metoda modelu, nie należy używać  nazw wykorzystywanych
      już przez ActiveRecord::Base. Nowa metoda nadpisałaby metodę bazową co
      mogłoby doprowadzić do błędów. Nie należy używać nazw takich jak attributes
      albo connection. Asocjacje są wyjątkowo przydatne, jednak nie są magiczne.
      To użytkownik jest odpowiedzialny za dbanie o dopasowanie schematu bazy
      do asocjacji. Dla asocjacji belongs_to konieczne jest stworzenie kluczy
      obcych a dla has_and_belongs_to_many należy utworzyć odpowiednią tabelę
      join. Jeżeli w klasie Book jest napisane "belongs_to :author", migracja
      tworząca tabelę powinna zawierać "t.references :author" lub jeżeli tabela
      już istnieje "add_reference :books, :author". Jeżeli chce się wymusić
      integralność referencyjną na poziomie bazy danych należy dodać opcję
      "foreign_key: true" do deklaracji kolumny 'reference'. Kolejny typ asocjacji
      has_and_belongs_to_many, wymaga tabeli join. Jeżeli nazwa tabeli nie zostanie
      jawnie przekazana opcji :join_table, Active Record wygeneruje ją automatycznie
      z nazw klas w kolejności leksykalnej. Np, tabela join między modelami author
      i book będzie się nazywała authors_books, ponieważ litera 'a' poprzedza 'b'.
      Pierwszeństwo pomiędzy nazwami modeli jest obliczane z wykorzystaniem
      operatora '<=>' klasy String. Oznacza to, że jeżeli stringi są różnej długości
      i są równe do długości krótszego, dłuższy string będzie miał pierwszeństwo
      przed krótszym. Na przykład mogłoby się wydawać że tabele paper_boxes i
      papers wygenerują tabelę join "papers_paper_boxes" ze względu na długość
      nazwy "paper_boxes". Powstanie jednak tabela "paper_boxes_papers", ponieważ
      '_' jest mniejsze niż 's'. Niezależnie od nazwy, należy ręcznie wygenerować
      tabelę join używając odpowiedniej migracji. Na przykład dla relacji
      "has_and_belongs_to_many :parts" i "has_and_belongs_to_many :assemblies"
      potrzebna jest tabela assemblies_parts. Powinna być ona tabelą bez klucza
      głównego. Przekazana zostaje opcja "id: false", ponieważ tabela nie
      reprezentuje modelu. Jest to wymagane aby asocjacja działała prawidłowo.
      Jeżeli obserwowane są dziwne zachowania w powyższej asocjacji, np zniekształcone
      id modeli lub wyjątki o konfliktach id, możliwe, że popełniony został właśnie
      ten błąd. Do stworzenia tabeli join można też użyć metody create_join_table.
      Domyślnie asocjacje szukają obiektów jedynie w zasięgu aktualnego modułu.
      Może to być istotne jeżeli modele AR są deklarowane wewnątrz modułu.
      Jeżeli klasy są zadeklarowane w tym samym module asocjacja zadziała, jeżeli
      są w innych - nie. Aby użyć asocjacji z modelami z różnych przestrzeni nazw
      konieczne jest przekazanie pełnej nazwy klasy w deklaracji asocjacji, np
      "class_name: "MyApplication::Billing::Account"" w klasie supplier i
      "class_name: "MyApplication::Business::Supplier"" w klasie account.
      Asocjacje działają dwukierunkowo, co wymaga deklaracji w obu modelach, np
      has_many i belongs_to. AR podejmie próbę automatycznej identyfikacji tych
      modeli opartą na nazwie asocjacji. W ten sposób AR wczyta jedynie jedną
      kopię obiektu klasy Author sprawiając, że aplikacja będzie szybsza i mniej
      narażona na niespójność danych. AR automatycznie identyfikuje większość
      asocjacji ze standardowymi nazwami jednak nie zrobi tego dla asocjacji
      zawierających scope lub jedną z opcji :through :foreign_key. W tym przypadku
      należy ręcznie zadeklarować dwukierunkową asocjację używając opcji :inverse_of.
    </p>
  </li>


  <li>
    <p>
      Sekcja zwiera szczegóły każdego typu asocjacji, ich metody i opcje.
      Metoda belongs_to to relacja jeden do jednego i oznacza że ta klasa
      posiada klucz obcy. Jeżeli klucz obcy posiada inna klasa, nalezy użyć
      has_one. Relacja belongs_to powoduje wygenerowanie 6 metod dla modelu.
      Metody mają nazwy odpowiadające nazwie modelu. Kiedy inicjalizowana jest
      nowa asocjacja has_one lub belongs_to, należy użyć prefiksu "build_"
      aby ją zbudować. Metoda association.build jest używana do relacji has_many
      i has_and_belongs_to_many. Aby ją utworzyć należy skorzystać z prefixu
      create_. Metoda association zwraca powiązany obiekt lub nil. Jeżeli obiekt
      został już wcześniej wczytany, zostanie zwrócona wersja z cache. Aby
      nadpisać to zachowanie należy wywołać #reload_association na obiekcie
      rodzica, np "@author = @book.reload_author". Metoda association= to
      przypisanie obiektu do obiektu. Oznacza to pobranie klucza głównego i
      ustawienie go jako klucza obcego obiektu. Metoda build_association zwraca
      nowy obiekt odpowiedniego typu jednak nie powoduje zapisania go w bazie,
      np "@author = @book.build_author(author_number: 123, author_name: "John Doe")".
      Metoda create_association działa podobnie jak poprzednia z tym że obiekt
      zostanie zapisany w bazie danych. Wersja z wykrzyknikiem generuje błąd
      jeśli obiekt jest nieprawidłowy. Asocjacja belongs_to może zostać modyfikowana
      z użyciem różnych opcji. Jeżeli opcja :autosave jest ustawiona na true, RoR
      zapisze wszystkie załadowane obiekty asocjacji i usunie wszystko obiekty
      zaznaczone do usunięcia za każdym razem kiedy główny obiekt zostanie zapisany.
      Ustawienie autosave na false to nie to samo co brak ustawienia autosave.
      Jeżeli opcja autosave nie jest ustawiona, nowe połączone obiekty będą zapisane
      ale updatowane obiekty nie. Jeżeli nazwa modelu nie może być wywnioskowana
      na podstawie nazwy asocjaciji można użyć opcji class_name. Np jeżeli książka
      należy do autora ale nazwa modelu z autorem to Patron, można napisać
      "belongs_to :author, class_name: "Patron"". Opcja :counter_cache używana jest
      do efektywniejszego wyszukiwania liczby obiektów. Można np napisać w modelu
      Book "belongs_to :author, counter_cache: true". W tym przypadku w modelu
      Author należy dodać kolumnę books_count. Domyślną nazwę kolumny można
      nadpisać podając ją zamiast wartości true - "counter_cache: :count_of_books".
      Opcja :counter_cache powinna być zadeklarowa jedynie po stronie relacji
      belongs_to. Kolumny counter_cache są dodawane do listy atrybutów read-only
      modelu zawierającego poprzez attr_readonly. Opcja :dependent ustawiona na
      :destroy usuwa powiązane obiekty razem z głównym obiektem. Ustawiona na
      :delete kasuje obiekty bezpośrednio z bazy bez wywoływania metody destroy.
      Nie należy ustawiać opcji :dependent w asocjacji belongs_to połączonej
      z has_many. Może to doprowadzić do powstania osieroconych rekordów w bazie.
      Domyślnie RoR zakłada że nazwa klucza obcego to nazwa asocjacji z sufixem
      _id. Opcja :foreign_key pozwala na bezpośrednie wybranie klucza obcego, np
      "belongs_to :author, class_name: "Patron", foreign_key: "patron_id"".
      Kolumny klucza obcego nigdy nie są tworzone automatycznie i trzeba je
      dodać w migracji. Domyślnie klucz główny przechowywany jest w kolumnie o
      nazwie id, można to jednak zmienić opcją :primary_key. Można np napisać
      "self.primary_key = 'guid'" i "belongs_to :user, primary_key: 'guid'".
      Kiedy wykonane zostanie "@user.todos.create", rekord @todo będzie miał
      user_id jako wartość guid @user. Opcja inverse_of określa nazwę asocjacji
      has_many lub has_one, która jest odwrotnością tej asocjacji. Opcja :polymorphic
      ustawiona na true wskazuje, że jest to asocjacja polimorficzna. Opcja :touch
      ustawiona na true powoduje, że kolumny updated_at lub updated_on powiązanych
      obiektów będą ustawione na aktualny czas jeżeli obiekt jest zapisywany
      lub usuwany. Np "belongs_to :author, touch: true" w klasie Book sprawi, że
      podczas zapisywania lub usuwania książki, timestamp autora będzie aktualizowany.
      Można też wprost wskazać timestamp - "touch: :books_updated_at".
      Opcja :validate ustawiona na true powoduje walidacje powiązanych obiektów
      w czasie zapisywania. Domyślnie jest ustawiona na false. Opcja :optional
      z wartością true pozwala na pomijanie sprawdzania istnienia powiązanych obiektów.
      Czasami może istnieć konieczność dostosowania zapytań używanych przez belongs_to.
      Można to uzyskać z pomocą scope blocków, np "belongs_to :author, ->
      { where active: true }". W bloku można użyć dowolnych standardowychmetod zapytań.
      Metoda where informuje o warunkach, jakie obiekt musi spełnić. Metoda includes
      jest używana do zadeklarowania asocjacji drugiego rzędu, które powinny być
      załadowane kiedy asocjacja jest używana. Np jeżeli autor jest często
      pozyskiwany z modelu, można przyspieszyć działanie aplikacji poprzez
      włączenie autorów do asocjacji od rozdziałów do książek. Nie ma potrzeby
      używania includes dla pośrednich relacji. Na przykład jeżeli istnieje relacja
      "Book belongs_to :author", autor jest wczytywany automatycznie w razie
      potrzeby. Z opcją :readonly powiązane obiekty wczytane z relacji będą tylko
      do odczytu. Metoda select pozwala na nadpisanie SQL SELECT używanej do
      uzyskania danych o powiązanych obiektach. Domyślnie RoR pobiera wszystkie
      kolumny. Jeżeli metoda select jest używana w relacji belongs_to, należy też
      ustawić opcję foreign_key aby mieć pewność prawidłowych wyników. Można sprawdzić
      czy jakiekolwiek powiązane obiekty istnieją używając metody association.nil?.
      Przypisywanie obiektu do asocjacji belongs_to nie zapisuje automatycznie
      ani samego obiektu ani obiektu powiązanego. Asocjacja has_one to połączenie
      jeden do jednego. Klucz obcy jest w drugim modelu. Jeżeli klasa ma klucz obcy,
      należy użyć belongs_to. Relacja has_one generuje 6 metod. Metoda association
      zwraca powiązany obiekt, w razie potrzeby z cache. Aby przeładować należy
      użyć #reload_association na rodzicu. Wersja ze znakiem równości przypisuje
      obiekt do obiektu. Metoda build association zwraca nowy obiekt odpowiedniego
      typy bez zapisywania, create_association zapisuje. Wykrzyknik na końcu
      generuje błędy. Metoda has_one posiada różne opcje. Opcja :as stosowana
      jest przy relacjach polimorficznych. Opcja :autosave zapisuje obiekty powiązane.
      Opcja :class_name pozwala na jawne przekazanie nazwy klasy. Opcja :dependent
      informuje, co należy zrobić jeżeli właściciel obiektu jest usuwany. Wybór
      destroy oznacza usunięcie, :delete usunięcie bezpośrednio w bazie, :nullify
      ustawienie klucza obcego na NULL, :restrict_with_exception generuje błąd
      jeżeli istnieje powiązany rekord, :restricted_with_error powoduje dodanie
      błędu do obiektu właściciela jeżeli istnieje powiązany obiekt. Nie należy
      ustawiać opcji :nullify dla relacji, które mają ograniczenie NOT NULL.
      Jeżeli nie ustawi się dependent na destroy, nie będzie możliwości zmiany
      powiązanych obiektów ponieważ klucz obcy zostanie ustawiony na niedozwoloną
      wartość NULL. Opcja :foreign_key pozwala na jawne zadeklarowanie nazwy kolumny
      klucza obcego. Metoda :inverse_of określa nazwę asocjacji belongs_to, która
      jest odwrotnością tej asocjacji. Opcja :primary_key to ustawianie nazwy
      kolumny klócza głównego. Opcja :source określa źródłową nazwę asocjacji
      dla has_one :through. Metoda :source_type określa typ źródłowej asocjacji
      dla asocjacji has_one :through, która przechodzi przez polimorficzną asocjację.
      Metoda :through określa join model, przez który wykonywane jest zapytanie.
      Opcja :touch sprawia że kolumny updated_at i updated_on powiązanego obiektu
      będą updatowane jeżeli obiekt zostanie zapisany lub usunięty. Można też
      wybrać, który timestamp ma być aktualizowany. Opcja :validate sprawia, że
      powiązane obiekty są walidowane za każdym razem, kiedy obiekt jest zapisywany.
      Dodatkowe opcje można przekazać przez bloki scope. Metoda where określa
      warunki jakie obiekt musi spełnić, includes informuje jakie modele mają być
      załadowane sprawiając, że aplikacja działa szybciej. Dzięki readonly, powiązane
      obiekty będą tylko do odczytu, select pozwala na nadpisanie SQL SELECT. Domyślnie
      RoR pobiera wszystkie kolumny. Istnienie powiązanych można sprawdzić metodą
      association.nil?. Przypisanie obiektu do has_one powoduje jego automatyczne
      zapisanie. Zapisany jest również obiekt zastępowany. Jeżeli przypisanie się
      nie powiedzie metoda zwróci wartość false. Jeśli główny obiekt nie był zapisany
      powiązane obiekty również nie będą zapisane aż do czasu zapisania rodzica.
      Aby przypisać obiekt do relacji has_one bez zapisywania należy użyć metody
      build_association. Relacja has_many to relacja jeden do wielu. Oznacza to,
      że inna klasa posiada klucze obce. RoR wygeneruje dla tej relacji 17 metod.
      Metoda collection to lista powiązanych obiektów, "collection<<" dodaje obiekt
      do listy, collection.delete(object, ) usuwa jeden lub więcej obiektów przez
      ustawienie ich kluczy obcych na NULL. Jeżeli obiekty były powiązane przez
      "dependent: :destroy" lub "dependent: :delete_all" zostaną w odpowiedni
      sposób usunięte(z użyciem metody destroy lub bezpośrednio). Kolejna metoda
      to collection.destroy(object,...). Usuwa ona jeden lub więcej obiektów
      wywołując na nich destroy. Obiekty będą zawsze usunięte z bazy ignorując
      opcję :dependent. Metoda collection=(objects) ustawia wartość listy przez
      dodawanie lub usuwanie obiektów. Zmiany w bazie danych są trwałe. Metoda
      collection_singular_ids zwraca tablicę id obiektów z listy. Podobna funkcja
      collection_singular_ids=(ids) ustawia listę obiektów na podstawie listy
      kluczy. Obiekty są usuwane lub dodawane a zmiany są trwałe. Metoda collection.clear
      usuwa wszystkie obiekty z listy zgodnie z zasadami z opcji dependent. Jeśli
      opcja nie została ustawiona, stosowana jest domyślna strategia. Dla relacji
      has_many :through to delete_all a dla has_many ustawianie kluczy obcych na
      NULL. Obiekty zostaną usunięte jeżeli ustawiono dependent: :destroy lub
      dependent: :delete_all. Metoda collection.empty? sprawdza czy lista obiektów
      jest pusta, collection.size zwraca liczbe obiektów, collection.find(...)
      wykorzystywana jest do szukania obiektów, collection.where(...) znajduje
      obiekty na podstawie przekazanych warunków. Obiekty są ładowane lazily i
      zostaną odczytane z bazy jedynie jeśli nastąpi próba ich odczytania.
      Metoda collection.exists?(...) sprawdza czy obiekt spełniający jakiś warunek
      istnieje w liście. Metoda collection.build zwraca obiekt lub tablicę obiektów
      powiązanego typu. Obiekty nie zostaną zapisane. Aby je zapisać należy użyć
      collection.create lub collection.create! generujące błąd. Metoda reload
      wymusza odczyt z bazy danych. Jeżeli nie ma powiązanych obiektów zwraca
      pustą relację. Relacja has_many posiada wiele opcji. Opcja :as wskazuje
      na relację polimorficzną, :autosave zapisuje powiązane obiekty, :class_name
      ustawia nazwę modelu, :counter_cache używana jest do ustawiania nazwy
      dla ustawionego ręcznie :counter_cache w relacji belongs_to. Opcja :dependent
      reguluje zachowanie powiązanych obiektów w trakcie usuwania obiektu głównego.
      Dostępne opcje to :destroy, :delete_all, :nullify, :restrict_with_exception,
      :restricted_with_error. Opcje :destroy i :delete_all wpływają na semantykę
      metod collection.delete i collection= sprawiając że będą one usuwać powiązane
      obiekty, kiedy są usuwane z listy. Nazwę klucza obcego ustawia :foreign_key,
      :inverse_of określa nazwę drugiej strony relacji, :primary_key to nazwa
      kolumny klucza głównego, :source to źródłowa nazwa asocjacji has_many :through.
      Opcji tej używa się jedynie w sytuacji gdy nazwa nie może być wywnioskowana
      automatycznie z nazwy relacji. Opcja :source_type określa typ relacji dla
      has_many :through przechodzącej przez polimorficzną asocjację, :through to
      nazwa join modelu, :validate sprawdza poprawność powiązanych obiektów.
      Dodatkowe opcje dla has_many przekazywane mogą być w bloku. Opcja where
      sprawdza czy obiekt spełnia jakieś warunki, extending to nazwa modułu używanego
      do rozszerzenia proxy relacji, group to nazwa atrubutu do zgrupowania wyników
      z zapytania GROUP BY w finderze SQL. Metoda includes wskazuje, które modele
      powinny być załadowane aby przyspieszyć działanie aplikacji, limit wyznacza
      maksymalną liczbę pobranych obiektów, offset pozwala wybrać liczbę pomijanych
      rekordów, order to kolejność obiektów, readonly - obiekty tylko do odczytu,
      select - nadpisywanie zapytania SQL SELECT. Jeżeli stosowana jest metoda select
      należy pamiętać o koniecznośći istnienia kluczy głównego i obcego w powiązanych
      modelach. W przeciwnym razie RoR wygeneruje błąd. Opcja distinct pozwala na
      uniknięcie duplikatów w pobieranej liście obiektów. Aby zapewnić to zachowanie
      na poziomie bazy danych należy użyć unikalnego indeksu na odpowiednich kolumnach.
      W przypadku próby dodania kilka razy tego samego rekordu, wygenerowany zostanie
      błąd. Sprawdzanie istnienia obiektu przy użyciu include? może doprowadzić do
      race conditions. Przypisywanie obiektów do has_many powoduje ich zapisanie,
      nieudany zapis zwraca false. Jeżeli obiekt główny nie był zapisane, pozostałe
      obiekty również nie będą zapisane. Aby stworzyć relację has_many bez zapisywania
      należy użyć collection.build. Asocjacja has_and_belongs_to_many tworzy relację
      wiele do wielu z innym modelem. W bazie danych oznacza to stworzenie tabeli
      join z kluczami obcymi odnoszącymi się do każdej z klas. Relacja powoduje
      wygenerowanie siedemnastu metod. Jeżeli tabela join ma dodatkowe kolumny
      oprócz dwóch kolumn z kluczem obcym, będą one dodane jako atrybuty rekordu
      dostępne przez tę relację. Zwrócone rekordy z dodatkowymi atrybutami będą
      zawsze readonly ponieważ RoR nie może zapisać zmian w tych atrybutach.
      Używanie dodatkowych atrybutów w tabelach join jest deprecated. Jeżeli
      konieczne jest istnienie takiego skomplikowanego zachowania, należy użyć
      has_many :through zamiast has_and_belongs_to_many. Metoda collection to
      lista powiązanych obiektów, "collection<<" to dodawanie obiektu, metoda
      collection.delete usuwa rekordy z tabeli join bez usuwania obiektów, podobnie
      działa collection.destroy. Funkcja colection= ustawia listę obiektów a zmiany
      w bazie danych są trwałe, collection_singular_ids zwraca listę kluczy id,
      collection_singular_ids= ustawia listę obiektów na podstawie listy id,
      collection.clear usuwa wszystkie obiekty z listy usuwając wiersze w tabeli
      join, collection.empty? sprawdza czy lista jest pusta, collection.size
      zwraca rozmiar listy. Do szukania obiektów można użyć metod find lub where
      (w przypadku where obiekty są wczytywane lazily). Aby sprawdzić czy obiekt
      istnieje używa się funkcji exists?. Do stworzenia nowego obiektu bez zapisywania
      wykorzystywana jest metoda build, z zapisywaniem create lub create!.
      Funkcja reload zmusza program do ponownego wczytania danych. Relacja
      has_and_belongs_to_many posiada wiele różnych opcji. Aby ustawić nazwę
      klucza obcego można wykorzystać opcję :association_foreign_key, :autosave
      określa czy obiekty powiązane powinny być zapisywane lub usuwane jeśli
      zapisywany jest obiekt główny. Aby ustawić nazwę modeli w relacji można
      wykorzystać opcję :class_name, nazwa klucza obcego to :foreign_key.
      Nazwa tabeli join ustawiana jest przez :join_table, opcja :validate
      określa czy powiązane obiekty mają być walidowane w czasie zapisywania
      obiektu głównego(domyślnie true). Zapytania w relacji mogą być konfigurowane
      przy użyciu scope blocków. Opcja where określa warunki jakie ma spełnić obiekt.
      Można je przekazać jako string lub hash. Jeżeli używa się where w stylu hash,
      tworzenie obiektów przez tę asocjację będzie automatycznie scopowane z użyciem
      hasha. Np funkcje assemblies.create lub assemblies.build stworzą obiekty,
      w których wartość kolumny factory będzie ustawiona na "Seattle". Metoda
      extending określa nazwę modułu do rozszerzenia asocjacji proxy, group
      przyjmuję nazwę atrybutu używanego do grupowania wyników zapytania(używa
      GROUP BY z SQL). Metoda includes określa relacje drugiego rzędu, które powinny
      być załadowane jeśli asocjacja jest używana, limit to maksymalna liczba
      rekordów pobieranych przez relację, offset pozwala na pominięcie rekordów,
      order to kolejność pobieranych obiektów. Dzięki readonly obiekty pozyskane
      poprzez relację będą tylko do odczytu, select nadpisuje SQL SELECT, distinct
      usuwa duplikaty. Obiekt w relacji has_and_belongs_to_many zostaje automatycznie
      zapisany w trakcie przypisania asocjacji. Jeżeli przypisywanych jest wiele
      obiektów, wszystkie zostaną zapisane. Błędy walidacji anulują przypisanie
      i powodują zwrócenie wartości false. Powiązane obiekty są zapisywane jeżeli
      obiekt główny był wcześniej zapisany lub po jego zapisaniu. Aby stworzyć
      relację bez zapisywania można wykorzystać metodę collection.build.
      Normalne callbacki korzystają z cyklu życia obiektu pozwalając na wywoływanie
      ich w różnych sytuacjach. Np callback before_save uruchamia się zanim obiekt
      zostanie zapisany. Callbacki asocjacyjne są podobne do normalnych callbacków
      z tą różnicą, że triggerują je wydarzenia w życiu asocjacji. Callbacki
      asocjacyjne definiuje się przez dodawanie opcji w deklaracji asocjacji.
      Jeżeli jest ich wiele mogą być dodane z tablicy. Dostępne callbacki to
      before_add, after_add, before_remove i after_remove. Jeżeli callback
      before_add wygeneruje wyjątek, obiekt nie zostanie dodany do kolekcji,
      błąd w before_remove sprawi, że obiekt nie zostanie usunięty. Należy pamiętać
      że callbacki uruchamiają się jedynie jeśli obiekt jest dodawany lub usuwany
      za pośrednictwem listy relacji. Możliwości RoR nie ograniczają się do
      wbudowanych funkcji relacji. Obiekty mogą być rozszerzane przez anonimowe
      moduły, nowe findery, metody tworzące obiekty itd. Można np zaprojektować
      metodę find_by_book_prefix w "relacji has_many :books do...". Jeżeli jakieś
      rozszerzenie ma być stosowane przez wiele asocjacji, można użyć nazwanego
      modułu - "{ extending FindRecentExtension }". Rozszerzenia mogą się odwoływać
      do wnętrza asocjacji proxy używając trzech atrybutów metody proxy_association.
      Metoda owner zwraca obiekt, którego asocjacja jest częścią, reflection zwraca
      odbicie obiektu, który opisuje asocjację, target zwraca powiązany obiekt
      dla belongs_to i has_one lub listę powiązanych obiektów dla has_many i
      has_and_belongs_to_many.
    </p>
  </li>

  <li>
    <p>
      Czasami istnieje potrzeba dzielenia pól i zachowań
      pomiędzy różnymi modelami. Załóżmy, że istnieją modele Car, Motorcycle i
      Bicycle. Mają one takie same atrybuty color i price. Posiadają również
      własne kontrolery imetody działające w każdym przypadku trochę inaczej.
      Aby utworzyć tabelę można użyć: "rails generate model vehicle type:string
      color:string price:decimal{10.2}". Konieczne jest tu pole type, bez którego
      Single Table Inheritance nie zadziała. Aby wygenerować modele dziedziczące
      z vehicle należy użyć opcji --parent=PARENT. Generator nie utworzy odpowiedniej
      migracji, ponieważ tabela już istnieje. Aby wygenerować model Car dziedziczący
      po vehicle należy wpisać: "rails generate model car --parent=Vehicle".
      Powstanie klasa posiadająca cechy modelu głównego. Obiekty Car będą zapisywane
      w tabeli vehicles z polem type ustawionym na Car. W odpowiedni sposób zadziała
      też metoda Car.all. Z tabeli vehicles zostaną pobrane wszystkie obiekty
      typu Car.
    </p>
  </li>

</ul>
