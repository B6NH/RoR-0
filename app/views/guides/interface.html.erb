<h2>Active Record Interface</h2>

<ul>

  <li>
    <p>
      Aby pobrać obiekt z bazy danych, można użyć jednej z wielu metod wyszukujących. Każdy finder
      pozwala na przekazanie argumentu zawierającego zapytanie do bazy danych bez ręcznego tworzenia
      zapytań SQL. Metody finderów zwracające kolekcję zwracają obiekt klasy Relation. Metody
      zwracające jeden element, zwracają pojedynczy obiekt modelu. Podstawowa operacja wyszukiwania
      Mode.find(options) konwertuje przekazane opcje do postaci SQL, uruchamia zapytanie i pobiera
      dane z bazy, tworzy odpowiedni obiekt Ruby zawierający dane oraz uruchamia callbacki after_find
      i after_initialize jeśli zostały wcześniej ustawione. Metoda find pozwala na wyszukanie obiektu
      na podstawie id. Odpowiada zapytaniu "...WHERE id = X LIMIT 1". Metodzie można też przekazać
      tablicę wartości id. Metoda take pobiera obiekt bez uwzględniania kolejności i można jej
      przekazać liczbę obiektów. Funkcja first pobiera pierwszy obiekt z bazy domyślnie w kolejności
      id. Jeżeli default scope posiada ustawioną metodę porządkującą, first weźmie ją pod uwagę.
      Przekazanie liczby całkowitej spowoduje pobranie kilku pierwszych rekordów. Można też użyć
      first razem z order w celu pobrania pierwszego rekordu ze względu na jakiś atrybut. Metoda
      last to ostatni rekord i również można jej przekazać liczbę rekordów. Metoda find_by pozwala
      na określenie warunków dopasowania, np "Client.find_by first_name: 'Lifo'". Często zdarza się,
      że istnieje konieczność iterowania po wielu rekordach, na w trakcie wysyłania newslettera wielu
      użytkownikom lub podczas eksportowania danych. Zwykłe podejśćie ("User.all.each") staje się
      jednak niepraktyczne jeśli rozmiar tabeli jest zbyt duży. AR jest zmuszony do pobrania całej
      tabeli, zbudowania obiektów modeli dla każdego wiersza i przechowywania wszystkich danych w
      pamięci. Dla wielu rekordów takie zachowanie może przekroczyć ilość dostępnej pamięci. RoR
      posiada 2 metody pozwalające na ominięcie tego problemu przez podzielenie rekordów na mniejsze
      porcje. Pierwsza metoda, find_each pobiera porcję rekordów a następnie przekazuje każdy rekord
      oddzielnie do bloku jako model. Druga metoda find_in_batches pobiera porcję rekordów i wysyła
      ją do bloku jako tablicę modeli. Obie metody stosuje się do przetwarzania dużej ilości rekordów,
      które normalnie nie zmieściłyby się w pamięci jednocześnie. Jeżeli trzeba jedynie przejść w pętli
      przez tysiące rekordów, zwykłe metody find są lepszym rozwiązaniem. Metoda find_each pobiera
      rekordy w porcjach i przekazuje je do bloku pojedynczo. Działa na klasach modelu i na relacjach.
      Jeżeli istnieje porządek w receiverze, zachowanie metody zależy od flagi error_on_ignored_order.
      Dla wartości true generowany jest błąd ArgumentError. W przeciwnym wypadku kolejność rekordów
      jest ignorowana i wyświetlone zostaje ostrzeżenie. Zachowanie to można nadpisać używając opcji
      :error_on_ignore. Metoda find_each posiada różne opcje. Opcja batch_size określa liczbę rekordów
      w jednej porcji danych. Opcja :start pozwala na ustawienie początkowego id rekordu a :finish
      ostatniego. Można ich użyć razem określając zakres rekordów. Opcja :error_on_ignore nadpisuje
      konfigurację aplikacji, kontrolując czy należy wygenerować błąd w przypadku uporządkowanej
      relacji. Metodą podobną do find_each jest find_in_batches. Różnica polega na tym, że do bloku
      przekazywane są całe tablice modeli. Metoda zadziała w przypadku relacji, o ile nie mają
      ustawionej kolejności i posiada takie same opcje jak find_each.
    </p>
  </li>
  
  
  <li>
    <p>
      Metoda where pozwala na przekazanie warunków jakie mają spełnić rekordy i odpowiada zapytaniu
      WHERE w SQL. Warunku mogą być przekazane jako string, array lub hash. Na przykład aby znaleźć
      klientów z odpowiednią wartością pola - Client.where("orders_count = '2'"). Należy pamiętać,
      że przekazywanie warunków jako stringi może zmniejszyć bezpieczeństwo aplikacji. Jeżeli wartość
      argumentu zmienia się, można użyć tablicy - Client.where("orders_count = ?", params[:orders]).
      Pytajniki w zapytaniu zostaną zastąpione kolejnymi wartościami przekazanymi jako argumenty.
      Lepiej unikać przekazywania zmiennych przez interpolacja i stosować metodą where z dodatkowymi
      parametrami. Zmienne mogą być też przekazywane jako symbole i hash przechowujący ich wartości.
      Do wyszukania elementów na podstawie equality, range i subset można zastosować hash. Na przykład
      Client.where(locked: true). Nazwa pola może być typu string. W przypadku relacji belongs_to,
      istnieje możliwość użycia klucza do wskazania modelu jeżeli wartością jest obiekt AR. Warunki
      zasięgu mogą być przekazane jako hash - Time.now.midnight - 1.day)..Time.now.midnight. Odpowiada
      to zapytaniu BETWEEN w SQL. Przekazanie tablicy z wartościami powoduje utworzenie zapytania IN.
      Funkcja where.not odpowiada NOT a metoda or pozwala na łączenie wielu warunków.
    </p>
  </li>
  
  <li>
    <p>
      Do pobrania rekordów w odpowiedniej kolejności służy metoda order. Można na przykład wpisać
      Client.order(:created_at) lub Client.order("created_at"). Aby ustawić kolejność rosnąco lub
      malejąco należy użyć Client.order(created_at: :asc) i Client.order(created_at: :desc). Można
      też sortować w oparciu o wiele pól Client.order(orders_count: :asc, created_at: :desc) albo
      używając stringów Client.order("orders_count ASC, created_at DESC"). Istnieje też możliwość
      łączenia zapytań order Client.order("orders_count ASC").order("created_at DESC"). W większości
      typów baz danych stosowanie distinct z metodami takimi jak select, pluck, ids sprawi, że order
      wygeneruje błąd ActiveRecord::StatementInvalid chyba że użyte pola znajdowały się w liście
      select.
    </p>
  </li>
  
  
  <li>
    <p>
      Domyślnie Model.find wyszukuje wszystkie pola z setu używając select *. Aby pobrac tylko część
      kolumn należy użyć metody select - Client.select(:viewable_by, :locked). Spowoduje to powstanie
      modelu zawierającego jedynie wybrane pola i w przypadku próby dostępu do nieistniejących
      atrybutów zostanie wyświetlony błąd ActiveModel::MissingAttributeError: missing attribute:
      <attribute>. Metoda id nie powoduje jego wygenerowania dlatego należy zachować ostrożność
      podczas operacji związanych z relacjami potrzebującymi id do poprawnego działania. Aby pobrać
      jedynie unikalne wartości dla konkretnego pola można użyć metody distinct. Ograniczenie
      unikalności można później usunąć - q = Client.select(:name).distinct, q.distinct(false).
    </p>
  </li>
  
  <li>
    <p>
       Funkcji LIMIT z SQL odpowiada metoda limit. Pozwala na ograniczenie liczby pobieranych rekordów.
       Można ją łączyć z metodą offset pozwalającą na pomijanie rekordów Client.limit(5).offset(30).
    </p>
  </li>
  
  <li>
    <p>
      Metoda group to GROUP BY z SQL. Na przykład aby pobrać listę dat kiedy utworzono zamówienia
      można napisać "Order.select("date(created_at) as ordered_date, sum(price) as total_price").
      group("date(created_at)")". Dla każdej daty z zamówieniami zwrócony zostanie pojedynczy obiekt
      Order. Aby uzyskać całkowitą liczbę pogrupowanych elementów należy wywołać metodą count po
      zastosowaniu group - "Order.group(:status).count".
    </p>
  </li>
  
  <li>
    <p>
      SQL używa klauzuli HAVING do określenia warunków dla pól GROUP BY. Aby dodać ją do SQL
      utworzonego przez metodę Model.find należy użyć metody having. Na przykład można wpisać
      "Order.select("date(created_at) as ordered_date, sum(price) as total_price").group
      ("date(created_at)").having("sum(price) > ?", 100)". Spowoduje to zwrócenie daty i ceny
      dla każdego obiektu Order pogrupowanych ze względu na dzień zamówienia i z ceną powyżej $100.
    </p>
  </li>
  
  <li>
    <p>
      Przekazane wcześniej warunki mogą zostać usunięte dzięki metodzie unscope. Możliwe jest
      też usunięcie konkretnej klauzuli where. Warunki mogą być nadpisane z użyciem metody only.
      Funkcja reselect pozwala na zmodyfikowanie zapytania select, reorder zmienia kolejność
      rekordów a reverse_order ją odwraca. Metoda rewhere nadpisuje poprzednią klauzulę where.
    </p>
  </li>
  
  <li>
    <p>
      Metoda none zwraca relację bez rekordów. Kolejne zapytania dołączane do relacji wygenerują
      kolejne puste relacje. Jest to przydatne w sytuacjach gdy metoda musi wygenerować poprawny
      obiekt relacji.
    </p>
  </li>
  
  <li>
    <p>
      Metoda readonly relacji blokuje możliwość modyfikacji wszystkich zwróconych obiektów. Próba
      edycji obiektu spowoduje wygenerowanie błędu ActiveRecord::ReadOnlyRecord.
    </p>
  </li>
  
  <li>
    <p>
      AR posiada 2 mechanizmy lockingu - optimistic locking i pessimistic locking. Optimistic locking
      pozwala wielu użytkownikom na dostęp do tego samego rekordu i zakłada minimalne konflikty danych.
      Sprawdza, czy inny proces dokonał zmian w obiekcie od czasu gdy został odczytany. Jeśli miało
      to miejsce wygenerowany zostaje błąd ActiveRecord::StaleObjectError a zmiany są anulowane.
      Aby używać optimistic locking tabela powinna mieć kolumnę o nazwie lock_version typu integer.
      Za każdym razem kiedy rekord jest updatowany zwiększana jest wartość kolumny lock_version.
      Jeżeli update request posiada wartość niższą niż aktualna lock_version zostanie wyświetlony błąd
      ActiveRecord::StaleObjectError. Użytkownik jest odpowiedzialny za poradzenie sobie z konfliktem
      przez przechwycenie wyjątku, rollbackowanie, mergowanie lub inną logikę programu. To zachowanie
      może być wyłączone przez ustawienie ActiveRecord::Base.lock_optimistically = false. Aby nadpisać
      nazwę kolumny lock_version można skorzystać z atrybutu klasy ActiveRecord::Base o nazwie
      locking_column - self.locking_column = :lock_client_column. Pessimistic locking korzysta z
      mechanizmu zapewnianego przez bazę danych. Stosowanie lock podczas budowania relacji powoduje
      uzyskanie blokady na wybranych wierszach. Relacje używające lock działają zwykle w obrębie
      transakcji co chroni przed deadlockami. Metodzie lock można przekazać program SQL co pozwala
      na wybranie różnych typów locków. Na przykład SQL posiada wyrażenie LOCK IN SHARE MODE, dzięki
      któremu można zablokować rekord i jednocześnie pozwolić na jego odczytywanie przez pozostałe
      zapytania. Wystarczy przekazać odpowiedniego stringa jako parametr. Jeżeli istnieje już obiekt
      modelu, możliwe jest jednoczesne rozpoczęcie transakcji i ustawienie locka. Można to zrobić
      korzystając z bloku - "item.with_lock do...".
    </p>
  </li>
  
  <li>
    <p>
      Active Record posiada 2 metody służące do obsługi klauzul JOIN. Są to joins i left_outer_joins.
      Metoda joins powinna być używana jako INNER JOIN lub własne zapytania a left_outer_joins jako
      LEFT OUTER JOIN. Metody joins można używać na wiele sposobów, na przykład przekazując string
      z zapytaniem. AR pozwala na używanie nazw asocjacji zdefiniowanych w modelu jako skrót w
      klauzulach JOIN w trakcie używania metody join. Można na przykład napisać "Category.joins
      (:articles)" co spowoduje zwrócenie obiektu kategorii dla wszystkich kategorii z artykułami.
      Jeżeli więcej niż jeden artykuł posiada tę samą kategorię, na liście mogą się pojawić duplikaty.
      Aby tego uniknąć należy użyć metody distinct. Funkcji joins można przekazać wiele relacji,
      na przykład "Article.joins(:category, :comments)". Możliwe jest też przekazanie zagnieżdżonych
      relacji - "Article.joins(comments: :guest)" lub "Category.joins(articles: [{ comments: :guest },
      :tags])". Połączonym tabelom można przekazać warunku w obiektach Array lub String. Aby sprawdzić
      czy rekordy posiadają powiązane obiekty, można użyć metody left_outer_joins.
    </p>
  </li>
  
  <li>
    <p>
      Eager loading pozwala na ograniczenie ilości wykonywanych zapytań. Aby go zastosować należy
      użyć metody includes. Dzięki temu, na przykład zamiast 11 zapytań możliwe jest wykonanie tylko
      dwóch. Funkcja include może przyjmować jako argument wiele asocjacji lub zawierające je
      zagnieżdżone hashe. Również w tym przypadku istnieje możliwość dodawania warunków zapytania.
      Jeżeli asocjacja jest egaer loaded jako część join, wszystkie pola z własnej klauzili select
      nie będą obecne w załadowanych modelach. Spowodowane jest to niejednoznacznością tego czy
      powinny znajdować się w obiekcie rodzica czy dziecka.
    </p>
  </li>
  
  <li>
    <p>
      Scoping pozwala na stosowanie często używanych zapytań jako metod na modelach lub obiektach
      asocjacji. Wszystkie metody scopów powinny zwracać ActiveRecord::Relation lub nil. Aby stworzyć
      prosty scope należy użyć metody scope w klasie, np "scope :published, -> { where(published:
      true) }". Utworzoną funkcję można później użyć na klasie lub asocjacji. Scope może przyjmować
      argumenty, na przykład czas. Stosowanie metod klas jest zalecanym sposobem przekazywania
      argumentów. Funkcje te będą dostępne również w obiektach asocjacji. Scopy mogą stosować
      warunki przy czym należy pamiętać, że zawsze, nawet w przypadku ich niespełnienia, zwracają
      obiekt Relation. Błędne stosowanie tej cechy może doprowadzić do błędów NoMethodError.
      Jeżeli scope powinien odnosić się do wszystkich zapytań w modelu, można zastosować metodę
      default_scope. Dla bardziej skomplikowanych zachowań możliwe jest utworzenie metody klasy
      self.default_scope. Należy pamiętać, że podczas przekazywania parametrów w formacie Array
      argumenty default_scope nie mogą być skonwertowane na Hash w normalnych przypisaniach
      atrybutów. Scopy mogą być mergowane z użyciem warunku AND. Można łączyć i dopasowywać warunki
      scope i where a finalne zapytanie SQL będzie zawierało je wszystkie. Jeżeli ostatnie where
      nie powinno mieć decydującego znaczenia, można użyć Relation#merge. Klauzula default_scope
      zostanie dołączona do warunków scope i where. Aby usunąć scoping można użyć metody unscoped.
      Jest to szczególnie przydatne w przypadku gdy zdefiniowano default_scope w modelu jednak nie
      powinno się go stosować w konkretnym zapytaniu - "Client.unscoped.load". Metoda usunie cały
      scoping i spowoduje wykonanie normalnego zapytania w tabeli. Funkcja unscoped może jako
      argument przyjmować również blok.
    </p>
  </li>
  
  <li>
    <p>
      Active Record tworzy metodę findera dla wszystkich pól w tabeli. Na przykład jeśli istnieje
      pole first_name powstanie metoda find_by_first_name. Findery ze sobą łączyć, na przykład
      "Client.find_by_first_name_and_locked("Ryan", true)".
    </p>
  </li>
  
  <li>
    <p>
      Makro enum mapuje pole integer do zbioru określonych wartości. Na przykład dla dostępnych i
      niedostępnych rekordów "enum availability: [:available, :unavailable]" - "Book.available",
      "Book.where(availability: :available)" itp.
    </p>
  </li>
  
  <li>
    <p>
      Active Record pozwala na łączenie metod zapytań. Powoduje to wygenerowanie pojedynczego
      zapytania SQL, na przykład Person.select(...).joins(...).where(...). Jeżeli zapytanie pasuje
      do kilku rekordów, find_by pobierze tylko jeden.
    </p>
  </li>
  
  <li>
    <p>
      Metoda find_or_create pozwala na odnalezienie obiektu lub utworzenie go jeśli nie istnieje.
      To czy zostanie utworzony zależy od metod sprawdzających jego poprawność. Metody można używać
      razem z metodą create_with lub blokiem. Funkcja find_or_create_by! powoduje wygenerowanie
      błędu w przypadku niepowodzenia walidacji. Metoda find_or_initialize_by działa tak jak
      find_or_create_by z tym, że zamiast tworzenia obiektu z użyciem create, wykorzystuje funkcję
      new.
    </p>
  </li>
  
  <li>
    <p>
      Aby samodzielnie napisać zapytania SQL można użyć metody find_by_sql. Zwraca ona tablicę wyników
      nawet jeżeli znaleziony został tylko jeden obiekt. W podobny sposób działa metoda select_all z
      tą różnicą, że ze znalezionych rekordów nie zostaną utworzone obiekty. Zwrócony będzie jeden
      obiekt ActiveRecord::Result. Metoda pluck służy to zapytań na jednej lub wieku kolumnach tabeli
      modelu. Przyjmuje jako argument listę nazw kolumn i zwraca tablicę odpowiednich wartości. Metoda
      konwertuje wynik z bazy danych do obiektu Array bez tworzenia obiektów ActiveRecord. Może to
      oznaczać lepszą wydajność dla dużego i często wykonywanego zapytania. Nie ma ograniczenia co do
      ilości przekazywanych tabel. W przeciwieństwie do select, pluck uruchamia pośrednie zapytania i
      z tego powodu nie może być łączona z kolejnymi scopami chociaż może korzystać z tych, które
      zostały utworzone wcześniej. Metoda ids może być użyta do pluckowania wszystkich ID relacji
      z użyciem klucza głównego tabeli.
    </p>
  </li>
  
  <li>
    <p>
      Jeśli istnieje potrzeba sprawdzenia czy obiekt istnieje, można zastosować metodę exists?.
      Wykonuje takie samo zapytanie jak find, jednak zamiast obiektu, zwraca wartości true lub false.
      Można jej przekazać wiele wartości - "Client.exists?(name: ['John', 'Sergei'])" a także
      wywołać bez parametrów "Client.where(first_name: 'Ryan').exists?" lub "Client.exists?".
      Aby sprawdzić czy model lub relacja istnieją można użyć metod any? i many?.
    </p>
  </li>
  
  <li> 21 21 21 21 21
    <p>
      Wszystkie metody kalkulujące działają bezpośrednio na modelu lub relacji. Można je poprzedzić
      innymi finderami lub relacjami. Aby sprawdzić liczbę rekordów w tabeli można użyć metody count.
      Jeżeli zliczane mają być tylko obiekty posiadające określone pole, należy przekazać jego nazwę
      jako argument funkcji - "Client.count(:age)". Metoda average liczy średnią dla określonej
      tabeli, minimum znajduje wartość minimalną a maximum maksymalną. Do obliczania sum pola tabeli
      służy metoda sum.
    </p>
  </li>
  
  <li>
    <p>
      Na zapytaniach triggerowanych przez relacje można użyć EXPLAIN. Active Record wykonuje pretty
      printing emulujący zachowanie odpowadającej powłoki bazy danych. Eager loading może striggerować
      więcej niż jedno zapytania a niektóre zapytania mogą potrzebować rezultatów poprzednich. Ze
      względu na to, explain wykonuje zapytanie, po czym czeka na kolejne informacje. Więcej informacji
      na temat EXPLAIN można znaleźć w źródłach związanych z konkretnymi bazami danych.
    </p>
  </li>
  
</ul>
