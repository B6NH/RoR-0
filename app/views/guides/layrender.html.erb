<h2>Layouts and Rendering</h2>

<ul>

  <li>
    <p>
      Przewodnik opisuje interakcje pomiędzy kontrolerem a widokiem w trójkącie MVC. Kontroler jest
      odpowiedzialny za zarządzanie całym procesem przetwarzania requestu, chociaż zwykle najbardziej
      skomplikowana logika znajduje się w modelu. Jeśli konieczne jest wysłanie odpowiedzi do
      użytkownika, sterowanie przekazywane jest widokowi. Przewodnik porusza takie tematy jak
      decydowanie co powinno zostać wysłane jako odpowiedź i która metoda powinna zostać użyta do jej
      utworzenia. Jeżeli odpowiedź to pełny widok, RoR wykonuje dodatkową pracę stosując layouty i
      widoki częściowe. Wszystkie te możliwości zostaną pokazane w dalszej części przewodnika.  
    </p>
  </li>
  
  <li>
    <p>
      Z perspektywy kontrolera istnieją trzy sposoby, na które można stworzyć odpowiedź HTTP.
      Metoda render tworzy pełną odpowiedź i zwraca ją do przeglądarki, redirect_to wysyła przeglądarce
      kod przekierowania a head generuje odpowiedź składającą się jedynie z headerów HTTP wysyłanych
      do przeglądarki. Domyślnie RoR generuje widoki z nazwami odpowiadającymi odpowiednim ścieżkom.
      Na przykład widok app/views/books/index.html.erb zostanie wygenerowany dla ścieżki /books jeśli
      istnieje kontroler Books i zasób resources :books. Aby przekazać wartość do widoku wystarczy
      przypisać ją do zmiennej - "@books = Book.all" a później wyświetlić używając np "@books.each".
      Właściwe renderowanie wykonywane jest przez zagnieżdżone klasy modułu Action View o nazwie
      ActionView::Template::Handlers. Przewodnik nie opisuje w szczegółach tego procesu ale ważne jest
      aby wiedzieć, że rozszerzenie pliku widoku kontroluje wybór handlera szablonów. W większości
      przypadków najważniejszą pracę podczas renderowania zawartości aplikacji wykonuje metoda render.
      Można ją dostosowywać na różne sposoby, renderować tekst, JSON lub XML. Aby przetestować
      jej output można użyć metody render_to_string zwracającej stringa zamiast odpowiedzi do
      przeglądarki. Aby w tym samym kontrolerze wyrenderować widok odpowiadający innemu szablonowi
      można użyć metody render z nazwą tego szablonu(string lub symbol). Można też przekazać metodzie
      ścieżkę do widoku z innego kontrolera np "render "products/show"". Istnieje też alternatywny
      sposób wymagany w RoR 2.2 i wcześniejszych - "render template: "products/show"". Wszystkie
      pokazane metody sprowadzają się do jednego i należy używać tej, która w konkretnym przypadku
      jest najprostsza. Metoda render może obejść się całkiem bez widoku jeżeli zastosuje się ją z
      opcją :inline i przekaże ERB jako argument. Zwykle nie powinno się postępować w ten sposób
      ponieważ nie odpowiada to zasadom MVC i może sprawić że aplikacja stanie się zbyt skomplikowana.
      Domyślnie :inline renderuje ERB ale można to zmienić za pomocą opcji :type. Aby wyrenderować
      zwykły tekst należy zastosować metodę render z opcją :plain. Zwykle przydaje się to podczas
      generowania odpowiedzi Ajax lub usług sieciowych oczekujących czegoś innego niż poprawny HTML.
      Domyślnie :plain renderuje tekst bez użycia obecnego layoutu. Aby to zmienić należy ustawić
      wartość opcji :layout na true i użyć rozszerzenie .text.erb w pliku layoutu. Aby przesłać
      przeglądarce string HTML należy użyć opcji render :html. Jest to przydatne podczas renderowania
      małych fragmentów HTML. Jeżeli markup jest skomplikowany lepiej umieścić go w pliku szablonu.
      Podczas stosowania opcji :html entities będą escapowane jeżeli string nie został utworzony
      z html_safe APIs. Do renderowania JSON służy opcja :json i nie ma potrzeby wywoływania metody
      to_json na renderowanym obiekcie. Funkcja render wywoła ją automatycznie. Podobnie działa opcja
      :xml. RoR może generować zwykły JavaScript dzięki opcji :js. Do przesłania zwykłej zawartości
      służy opcja :raw. Treść będzie w tym przypadku typu text/plain i jest to domyślne ustawienie dla
      odpowiedzi Action Dispatch. RoR może renderować pliki z absolutnej ścieżki. Jest to przydatne
      na przykład podczas generowania statycznych wiadomosci błędów. Domyślnie renderowanie przebiega
      z aktualnym layoutem. Stosowanie opcji :file z inputem usera może zmniejszyć bezpieczeństwo
      aplikacji. Jeżeli layout nie jest wymagany, lepiej użyć metody send_file. Wywołania render
      akceptują 6 opcji. Opcja :content_type ustawia typ zawartośi, :layout pozwala na wybranie
      layoutu innego niż aktualny lub jego całkowite wyłączenie, :location ustawia header Location a
      :status zmienia kod statusu HTTP. W ostatnim przypadku można użyć wartości numerycznej lub
      symbolu, np 305 lub :use_proxy. Jeżeli nastąpi próba wygenerowania zawartości dla statusu
      niezapewniającego takiej możliwości, zostanie ona porzucona. RoR używa formatu ustawionego
      przez request lub domyślnie :html. Można to zmienić opcją :formats z symbolem lub tablicą
      symboli. Aby wyszukać wariacje szablonu w tym samym formacie, można wymienić liste wariantów
      przekazując je opcji :variants. Wariant może też zostać ustawiony w obiekcie requestu w akcji
      kontrolera. RoR do wyszukania layoutu korzysta ze specjalnego algorytmu opartego o hierarchię
      plików. Layout można ustawić w kontrolerze korzystając z metody layout. Aby zrobić to dla
      wszystkich kontrolerów nalezy użyć klasy ApplicationController. Stosując symbol można opóźnić
      wybór layoutu i podjąć decyzję dopiero w kontrolerze. Istnieje też możliwość skorzystania z
      obiektu Proc. Layouty warunkowe pozwalają na wybranie konkretnych akcji, dla których mają być
      użyte. Layouty zadeklarowane niżej w hierarchi nadpisują te, które pochodzą z wyższych klas.
      W podobny sposób działa hierarchia szablonów. Metoda render powinna być wywoływana w akcji
      maksymalnie 1 raz. Do przekierowań służą metody redirect_to i redirect_back. Należy pamiętać,
      że nie powodują one zatrzymania akcji a jedynie ustawienie odpowiedzi HTTP. Aby przerwać
      działanie funkcji konieczne jest użycie return lub innego mechanizmu haltującego. Opcja
      status pozwala na zmianę kodu statusu HTTP. Metoda head może być użyta do wysłania przeglądarce
      odpowiedzi składającej się jedynie z nagłówków. Przekazany argument jest interpretowany jako
      hash z nazwami headerów i ich wartościami.
    </p>
  </li>
  
  <li>
    <p>
      Budując odpowiedź, RoR łączy widok z aktualnym layoutem stosując wymienione wcześniej zasady.
      W obrębie layoutu istnieją 3 narzędzia pozwalające na komponowanie różnych części outputu w taki
      sposób, aby utworzyć pożądaną całość. Asset tag helpery pozwalają na generowanie HTML z linkami
      do feedów JavaScriptu, arkuszy stylów, obrazów, filmów i dźwięków. Można ich używać w layoutach
      lub w innych widokach chociaż auto_discovery_link_tag, javascript_include_tag a także stylesheet_
      link_tag zwykle umieszczane są w sekcji <head> layoutu. Asset tag helpery nie sprawdzają czy
      wskazywany asset istnieje w przekazanej lokalizacji. Ich jedynym zadaniem jest wygenerowanie
      odpowiedniego linku. Helper auto_discovery_link_tag buduje HTML, który może być użyty przez
      większość przeglądarek i feed readerów do wykrycia feedów RSS, Atom lub JSON. Jako parametry
      przyjmuje typ linku(:rss, :atom, :json), hash z opcjami przekazanymi do url_for i hash z opcjami
      tagu. Opcja :rel ustawia wartość rel w linku, :type to typ MIME a :title to tytuł linku. Aby
      wygenerować link tagu <script> należy użyć javascript_include_tag. Jeżeli RoR używany jest z
      włączonym asset pipeline, będzie to link prowadzący do /assets/javascripts. Plik js w obrębie
      aplikacji RoR znajduje się w jednej z 3 lokalizacji app/assets, lib/assets lub vendor/assets.
      Helperowi można też przekazać absolutną ścieżkę pliku lub URL. Jednocześnie można dołączyć
      kilka plików. Linkowanie plików CSS odbywa się za pośrednictwem helpera stylesheet_link_tag.
      Pliki znajdują się w folderach /assets/stylesheets, app/assets, lib/assets lub vendor/assets.
      Tutaj również można przekazać absolutną lub względną ścieżkę do plików. Domyślnie linki są
      generowane z ustawieniami media="screen" rel="stylesheet". Można to zmienić za pomocą opcji
      :media i :rel. Do tworzenia linków z obrazami i filmami służą odpowiednio image_tag i
      video_tag. Domyślnie pliki wczytywane są z folderów public/images i public/videos. Tag video
      obsługuje wszystkie opcje znacznika <video>: :poster, :autoplay, :loop, :controls, :autobuffer.
      Używając tablicy można jednocześnie można przekazać wiele nazw plików filmowych. Pliki dźwiękowe
      obsługuje audio_tag a ich domyślnym folderem jest public/audios. Dostępne opcje to :autoplay,
      :controls i :autobuffer. W kontekście layoutu yield oznacza sekcję, w której należy umieścić
      zawartość widoku. Najprościej jest skorzystać z jednego wywołania yield dla całej treści strony.
      Możliwe jest też korzystanie z yield w różnych regionach layoutu poprzez przekazanie metodzie
      odpowiedniego parametru. Służy do tego metoda content_for wskazująca, która część pliku powinna
      być wygenerowana w miejscu yield z określoną nazwą. Funkcja content_for jest przydatna jeżeli
      layout posiada różne sekcje, sidebary lub footery zawierające własną treść lub pliki JS i CSS.
      Partiale służą do umieszczania różnych części odpowiedzi we własnych plikach. Aby ich użyć
      należy przekazać metodzie render parametr określający nazwę widoku bez początkowego podkreślenia.
      Częściowe widoki mogą być traktowane jako funkcje pozwalające na lepszą organizację aplikacji.
      Partiale podobnie jak widoki mogą posiadać własne pliki layoutu. Aby skorzystać z tej możliwości
      należy przekazać jawnie nazwę partiala i layoutu metodzie render. Partialom można przekazywać
      loknalne zmienne - "render partial: "form", locals: {zone: @zone}". Aby przekazać zmienne tylko
      w określonych przypadkach należy użyć metody local_assigns. Każdy z partiali posiada zmienną
      z nazwą taką samą jak jego nazwa. Aby ustawić jej wartość należy użyć opcji :object. Metodzie
      render można też przekazać obiekt, dla którego wygenerowany zostanie odpowiedni widok. Potrafi
      ona również generować widoki dla kolekcji obiektów przekazanych w parametrze :collection lub
      z użyciem skrótu, np "render @products". RoR wygeneruje odpowiednie widoki nawet jeżeli obiekty
      z listy są różnych typów. W przypadku pustej listy metoda render zwraca wartość nil. Zmienne
      lokalne o własnych nazwach można deklarować dzięki opcji :as. Opcja :locals pozwala na użycie
      w partialu dowolnej liczby własnych zmiennych. Partiale korzystające z kolekcji posiadają
      zmienną _counter informującą ile razy wyrenderowano obiekt w obrębie widoku. Można też wskazać
      drugi partial renderowany pomiędzy głównymi partialami. Służy do tego opcja :spacer_template.
      Opcji layout można używać również podczas renderowania kolekcji. Może się zdarzyć, że aplikacja
      potrzebuje w jednym z kontrolerów nieznacznie zmodyfikowanego layoutu. W tym przypadku można
      skorzystać z zagnieżdżonych layoutów. W nowym pliku renderowany jest oryginalny widok oraz
      wprowadzane są konieczne zmiany.
    </p>
  </li>

</ul>
