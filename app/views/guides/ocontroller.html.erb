<h2>Action Controller Overview</h2>

<ul>
  <li>
    <p>
      Action Controller to litera C w modelu MVC. Po tym jak router zadecyduje,
      który kontroler powinien zostać użyty w requeście, kontroler jest odpowiedzialny
      za odpowiednie obsłużenie requestu i zwrócenie odpowiedniego outputu.
      Action Controller wykonuje automatycznie większość potrzebnych zadań i
      stosuje inteligentne konwencje, które ułatwiają jego obsługę. W większości
      konwencjonalnych aplikacji RESTful, kontroler otrzyma request(niewidoczny
      dla programisty), pobierze lub zapisze dane z modelu i użyje widoku do
      utworzenie outputu HTML. Jeżeli kontroler musi wykonywać zadania w nieco
      inny sposób to nie jest to problemem. Chodzi o to że jest to jednak
      najpopularniejszy sposób jego działania. Kontroler może być postrzegany
      jako pośrednik pomiędzy modelami i widokami. Sprawia, że dane modelu
      są dostępne w widoku, który można pokazać użytkownikowi oraz zapisuje i
      aktualizuje dane modelu.
    </p>
  </li>

  <li>
    <p>
      Konwencja nazw kontrolera określa, że nazwy klas powinny być w formie
      spluralizowanej, chociaż nie jest to wymagane(np ApplicationController).
      Nazwa ClientsController jest lepsza niż ClientController, SiteAdminsController
      jest lepsza niż SiteAdminController lub SitesAdminsController. Spluralizowane
      jest ostatnie słowo nazwy kontrolera. Trzymanie się tej konwencji pozwala
      na korzystanie z domyślnych generatorów ścieżek, np resources, bez potrzeby
      kwalifikowania każdego :path lub :controller i sprawia, że korzystanie z
      route helperów będzie jednolite w całej aplikacji.
    </p>
  </li>

  <li>
    <p>
      Kontroler to klasa Rubyego dziedzicząca z ApplicationController i posiadająca
      metody jak każda inna klasa. Kiedy aplikacja otrzymuje request, routing
      zadecyduje, który kontroler i która akcja powinny zostać użyte. Następnie
      RoR tworzy instancję odpowiedniego kontrolera i włącza metodę o nazwie
      takiej samej jak nazwa akcji. Na przykład, jeżeli użytkownik odwiedzi
      "/clients/new" aby dodać nowego klienta, RoR stworzy instancję ClientsController
      i wywoła jego metodę new. Należy zauważyć, że pusta metoda z powyższego przykładu
      zadziała, ponieważ RoR domyślnie renderuje widok "new.html.erb", chyba że
      w akcji podano inaczej. Przez tworzenie nowego Client, metoda new może
      stworzyć zmienną instancji @client, która będzie dostępna w widoku.
      ApplicationController dziedziczy z ActionController::Base, które definiuje
      wiele przydatnych metod. Ten przewodnik mówi o części z nich jednak więcej
      informacji znajduje się w dokumentacji API lub w źródle. Jako akcje dostępne
      są jedynie publiczne metody. Najlepiej jest mieć mało widocznych metod i
      stosować private lub protected dla funkcji, które nie są akcjami.
    </p>
  </li>

  <li>
    <p>
      Prawdopodobnie będzie istniała potrzeba dostępu do danych przesłanych przez
      użytkownika lub innych parametrów w akcji kontrolera. W aplikacji webowej
      możliwe są dwa rodzaje parametrów. Pierwsze to te przesyłane jako część
      URL(query string parameters). Query string to wszystko po znaku "?" w URL.
      Drugi typ parametru to dane POST. Te dane zwykle pochodzą z formularzy
      HTML wypełnionych przez użytkownika. Nazywane są POST, ponieważ mogą być
      przesłane jedynie jako część requestu HTTP POST. RoR nie rozróżnia query
      stringów i parametrów POST. Wszystkie dostępne są w hashu params w kontrolerze.
      Hash params nie ogranicza się do jednowymiarowych kluczy i wartości. Może
      zawierać zagnieżdżone tablice i hasze. Aby wysłać tablicę wartości, należy
      dołączyć pustą pare kwaparams.require(:product).permit(:name, data: {})dratowych nawiasów do nazwy klucza. Można np wysłać
      request "GET /clients?ids[]=1&ids[]=2&ids[]=3". Znaki kwadratowych nawiasów
      są niedozwolone w URL dlatego zostaną zapisane automatycznie w inny sposób.
      Należy jednak o tym pamiętać w trakcie wysyłania requestów ręcznie. Wartość
      params[:id] będzie równa ["1", "2", "3"]. Wartości parametrów to zawsze stringi
      i RoR nie podejmuje próby zgadywania lub rzutowania typów. Wartości [nil]
      lub [nil,nil,...] w params są ze względów bezpieczeństwa domyślnie zamieniane
      na []. Aby wysłać hash należy podać nazwę klucza w nawiasach, np w formularzu
      name="client[name]", name="client[address] itp. Kiedy formularz zostanie
      wysłany wartością params[:client] będzie odpowiedni  zagnieżdżony hasz.
      Obiekt params zachowuje się jak hash ale pozwala na zamienne używanie
      symboli i stringów jako kluczy. Jeżeli tworzona jest aplikacja web service,
      możliwe że potrzebne będzie przesyłanie parametrów w formacie JSON. Jeżeli
      nagłówek "Content-Type" requestu jest ustawiony na "application/json", RoR
      automatycznie załaduje parametry do hasha params, do którego zawartości będzie
      można się dostać w zwykły sposób. Jeżeli włączone jest ustawienie config.wrap_parameters
      w initializerze lub wrap_parameters było wywołane w kontrolerze, można bezpiecznie
      pominąć root element w parametrze JSON. W tym przypadku parametry będą
      sklonowane i zwrapowane z kluczem o nazwie opartej na nazwie kontrolera.
      W JSON można pominąć słowo "company" i jeżeli dane wysyłane są przez
      CompaniesController, zostanie on zwrapowany z kluczem :company. Nazwa klucza
      i wrapowane parametry mogą być odpowiednio skonfigurowane. Więcej informacji
      znajduje się w dokumentacji API. Parametry XML są parsowane za pośrednictwem
      gema actionpack-xml_parser. Hash params będzie zawsze zawierał klucze
      :controller i :action, jednak aby pobierać te wartości należy używać metod
      controller_name i action_name. Wszystkie inne parametry definiowane przez
      routing, np id będą również dostępne. Na przykład lista pokazująca aktywnych
      lub nieaktywnych klientów może być wyświetlana za pośrednictwem ścieżki
      z odpowiednim parametreparams.require(:product).permit(:name, data: {})m - "get '/clients/:status', to: 'clients#index',
      foo: 'bar'". W przypadku przekazania wartości active, params[:status]
      zostanie ustawiony na "active" a params[:foo] na "bar" tak jakby ta wartość
      została przekazana w query stringu. Kontroler otrzyma też params[:action]
      o wartości index i params[:controller] - clients. Możliwe jest ustawienie
      globalnych domyślnych parametrów do generowania URL poprzez zdefiniowanie
      metody o nazwie default_url_options w kontrolerze. Taka metoda powinna zwracać
      hash z odpowiednimi wartościami i symbolami jako kluczami. Podane opcję
      będą użyte jako punkt startowy w trakcie generowania URL, więc możliwe jest
      ich nadpisanie opcjami przekazanymi w wywołaniach url_for. Jeżeli metoda
      default_url_options zostanie zdefiniowana w klasie ApplicationController,
      podane wartości będą użyte podczas generowania wszystkich URL. Metoda może
      być też zdefiniowana w konkretnym kontrolerze, co sprawi, że będzie miała
      wpływ tylko na URLe wygenerowane w jego obrębie. W requescie metoda nie jest
      wywoływana dla każdego wygenerowanego URL. Ze względu na wydajność otrzymany
      hash jest cachowany i ma miejsce maksymalnie jedno wywołanie metody na request.
      Dzięki silnym parametrom AC nie pozwala na przypisania wartości do modelu
      jeśli nie udzielono takiego pozwolenia. Wymaga to świadomej decyzji, które
      atrybuty powinny mieć pozwolenie na masowe updaty. To praktyka, która zwiększa
      bezpieczeństwo aplikacji i chroni przed przypadkowym updatowaniem wrażliwych
      atrybutów modelu. Dodatkowo parametry mogą być oznaczone jako wymagane co
      spowoduje, że przepłyną przez predefiniowany flow raise/rescue generujący
      błąd 400 w przypadku braku wymaganych parametrów. Klucz id będzie miał
      pozwolenie na inkluzję o ile występuje w params i ma połączoną zezwoloną wartość
      skalarną. W przeciwnym razie klucz zostanie odfiltrowany i tablice hashe i
      inne obiekty nie będą mogły zostać włączone. Dozwolone typy skalarne to
      między innymi String Symbol NilClass Numeric TrueClass itp. Aby zadeklarować,
      że wartość params musi być tablicą dozwolonych wartości skalarnych należy
      zmapować klucz do pustej tablicy - "params.permit(id: [])". Czasami nie jest
      możliwe lub wygodne zadeklarowanie poprawnych kluczy, parametrów hasza lub
      jego wewnętrznej struktury. Wystarczy wtedy zmapować do pustego hasha.
      Otwiera to jednak drogę do podawania dowolnego inputu. W tym przypadku
      permit zapewnia, że wartości w zwróconej strukturze są dozwolonymi skalarami
      i odfiltrowuje wszystkie inne. Aby zezwolić na cały hash parametrów można
      użyć metody permit!. Oznacza ona hash i wszystkie subhashe jako dozwolone
      i nie sprawdza dozwolonych skalarów, wszystko jest akceptowane. Stosując
      permit! należy zachować wyjątkową ostrożność ponieważ pozwala to na masowe
      przypisanie obecnych i przyszłych atrybutów modelu. Metoda permit może
      być też użyta na zagnieżdżonych parametrach odpowiadających strukturze danych.
      Permitted attributes mogą być też stosowane w akcji new. Powoduje to problem
      wynikający z tego, że require nie może być używany na kluczu root, ponieważ
      w zwykłych warunkach nie istnieje on w trakcie wywoływania new. Metoda
      accepts_nested_attributes_for pozwala na updatowanie i usuwanie powiązanych
      rekordów na podstawie parametrów id i _destroy. Hashe z kluczami integer
      są traktowane inaczej i można zadeklarować atrybuty tak jakby były bezpośrednimi
      dziećmi. Ten rodzaj parametrów uzyskuje się używając accepts_nested_attributes_for
      w połączeniu z relacją has_many. Na przykład jeżeli parametry reprezentują
      nazwę produktu i hash zawierający dowolne dane powiązane z produktem, aby
      zezwolić na przypisanie nazwy produktu i całego hasza można użyć opcji
      "params.require(:product).permit(:name, data: {})". API silnych parametrów
      zostało zaprojektowane tak aby pasowało do najczęstszych przypadków użycia.
      Nie znaczy to jednak, że sprawdza się w każdym przypadku. Dlatego istnieje
      możliwość połączenia go z własnymi rozwiązaniami, tak aby jak najlepiej
      dostosować program do sytuacji.
    </p>
  </li>

  <li>
    <p>
      Aplikacja posiada sesję, dla każdego użytkownika. Może w niej przechowywać
      niewielkie ilości danych zachowywanych pomiędzy requestami. Sesja jest
      dostępna jedynie w kontrolerze i widoku i może używać jesnego z różnych
      mechanizmów przechowywania danych. CookieStore przechowuje wszystko po
      stronie klienta. CacheStore przechowuje dane w cache RoR. ActiveRecordStore
      to dane w bazie danych z użyciem Active Record(wymaga odpowiedniego gema).
      MemCacheStore przechowuje dane w memcachowanym clusterze(to implementacja
      legacy, lepiej używać CacheStore). Wszystkie typy sesji używają ciasteczka
      do przechowywania unikalnego ID dla każdej sesji(ciasteczka muszą być
      użyte, RoR nie pozwala na przekazywanie ID sesji w URL ze względów bezpieczeństwa).
      Dla większości storów, ID jest używane do pobrania danych sesji z serwera,
      np z tabeli bazy danych. Istnieje jednak jeden wyjątek i jest to domyślny
      i zalecany store - CookieStore, który trzyma wszystkie dane sesji w ciasteczku
      (ID jest w razie potrzeby nadal dostępne). Zaletą jest lekkość rozwiązania
      i nie ma potrzeby konfigurowania nowej aplikacji w celu używania sesji.
      Dane ciasteczek są kryptograficznie podpisane i zaszyfrowane. RoR nie podejmie
      próby ich odczytania jeżeli zostały edytowane. CookieStore może przechowywać
      około 4kB danych - dużo mniej niż inne story ale zwykle wystarczająco.
      Przechowywanie dużych ilości danych w sesji jest odradzane niezależnie od
      tego, który typ przechowalni jest używany. W szczególności należy wystrzegać
      się przechowywania złożonych obiektów(wszystko poza prostymi obiektami Ruby),
      ponieważ server może nie być w stanie odbudować ich pomiędzy requestami co
      spowoduje błąd. Jeżeli sesja użytkownika nie przechowuje krytycznych danych
      lub nie musi być dostępna przez długi czas(np jeżeli jest potrzebna tylko
      do wiadomości flash), można pomyśleć o użyciu CacheStore. Spowoduje to
      przechowywanie sesji z użyciem konfiguracji cache używanej przez aktualną
      konfigurację aplikacji. Zaletą tego rozwiązania jest możliwość użycia
      istniejącej infrastruktury cache do przechowywania sesji. Nie wymaga to
      żadnej dodatkowej konfiguracji ani administrowania. Wadą jest nietrwałość
      sesji, która może zniknąć w każdej chwili. Więcej o sesjach można przeczytać
      w przewodniku na temat bezpieczeństwa. Jeżeli potrzebny jest inny mechanizm
      przechowywania sesji, można go ustawić w initializerze. RoR ustawia klucz
      sesji(nazwę ciasteczke) podczas podpisywania danych sesji. Może być on
      również zmieniony w initializerze. Istnieje też możliwość przekazania klucza
      :domain i określenia nazwy domeny dla ciasteczka. RoR ustawia dla CookieStore
      tajny klucz uzywany do podpisywania danych sesji w pliku config/credentials.yml.enc.
      Można go zmienić używając "rails credentials:edit". Zmiana secret_key_base
      podczas używania CookieStore unieważni wszystkie istniejące sesje. W kontrolerze
      można uzyskać dostęp do sesji za pomocą metody session. Sesje są ładowane
      lazily. Jeżeli ich dane nie są pobierane w programie akcji, nie zostaną
      załadowane. Z tego powodu nie ma potrzeby blokowania sesji. Wystarczy z nich
      nie korzystać. Wartości sesji są przechowywane w parach key/value tak jak
      w przypadku hasha. Aby przechować coś w sesji wystarczy przypisać to do
      klucza. Aby usunąć coś z sesji, należy usunąć parę key/value. Można to zrobić
      pisząc np "session.delete(:current_user_id)". Do resetowania sesji służy
      metoda reset_session. Flash to specjalna część sesji czyszczona po każdym
      requeście. Oznacza to, że wartości przechowywane w niej będą dostępne
      jedynie w następnym requeście co jest użyteczne między innymi do przekazywania
      wiadomości błędów. Dostęp do niej jest realizowany podobnie jak w przypadku
      hasha. Na przykład w przypadku logowania kontroler może wysłać wiadomość,
      która będzie pokazywana użytkownikowi w następnym requeście - "flash[:notice]".
      Istnieje również możliwość przypisania wiadomości flash jako części przekierowania.
      Można przypisać :notice, :alert lub ogólny :flash, np "redirect_to root_url, notice:".
      Akcja destroy przekierowuje do root_url aplikacji, gdzie wiadomość zostanie
      wyświetlona. To, co stanie się wiadomością umieszczoną we flash zależy w
      całości od kolejnej akcji. Standardowo wyświetla się alerty błędów lub
      powiadomień używając flasha w layoucie aplikacji "flash.each.do |n,m| ...".
      W ten sposób, jeżeli akcja ustawi powiadomienie lub ostrzeżenie, layout
      wyświetli je automatycznie. Można przekazywać wszystko co potrafi przechowywać
      sesja. Nie trzeba ograniczać się do alertów i powiadomień. Jeżeli wartość
      flasha ma być utrzymana do kolejnego requesta należy użyć metody keep.
      Domyślnie, dodawanie wartości do flasha sprawia, że będą dostępne w następnym
      requeście jednak czasami istnieje potrzeba użycia ich w tym samym requeście.
      Na przykład jeżeli działanie akcji create zakończy się niepowodzeniem i
      wyrenderowany zostanie bezpośrednio szablon new, nie spowoduje to użycia
      nowego requesta. Mimo to ciągle istnieje możliwość wyświetlenia wiadomości
      z użyciem flasha. Aby to osiągnąć trzeba użyć metody flash.now tak samo jak
      używa się normalnego flasha.
    </p>
  </li>

  <li>
    <p>
      Aplikacja może przechowywać niewielkie ilości danych po stronie klienta - cookies.
      Będą one przechowywane pomiędzy requestami a nawet sesjami. RoR pozwala na łatwy
      dostęp do cookies dzięki metodzie cookies, która działa jak session i hash. Należy
      zauważyć, w sesji można ustawiać wartości na kluczy na nil, aby usunąć wartość
      ciasteczka trzeba użyć metody cookies.delete(:key). RoR posiada również signed
      cookie jar i zaszyfrowany cookie jar do przechowywania wrażliwych danych. Signed
      cookie jar dołącza kryptograficzną sygnaturę na wartościach ciasteczka aby chronić
      ich integralność. Zaszyfrowany cookie jar poza podpisywaniem wartosci szyfruje je
      dzięki czemu nie mogą być odczytane przez end usera. Te wyspecjalizowane cookie jary
      używają serializera aby serializować przypisane wiadomości w stringi i deserializować
      do postaci obiektów Ruby w czasie odczytu. Można wybrać, którego serializera należy
      użyć, np "...cookies_serializer = :json". Domyślny serializer dla nowej aplikacji to
      :json. Aby zachować zgodność ze starymi aplikacjami z istniejącymi ciasteczkami, jeśli
      serializer nie jest zdefiniowany wykorzystuje się domyślnie opcję :marshal. Można też
      ustawić opcję :hybrid. W tym przypadku RoR transparentnie zdeserializuje istniejące
      Marshal-serialized cookies w trakcie odczytu i zapisze je ponownie jako JSON. Jest to
      przydatne w trakcie migrowania istniejących aplikacji do serializera :json. Można też
      przekazać customowy serializer, który odpowiada na wiadomości load i dump. Należy
      pamiętać, że nie wszystkie obiekty Ruby mogą być serializowane jako JSON, np obiekty
      Date i Time będą serializowane jako stringi a klucze haszy zostaną zamienione w stringi.
      W ciasteczkach powinno się przechowywać jedynie proste dane. W przypadku złożonych należy
      samodzielnie zadbać o ich poprawną konwersję w kolejnych requestach. Jeżeli używa się
      cookie session store to odnosi się to również do hashów metod session i flash.
      
    </p>
  </li>
  
  <li>
    <p>
      ActionController sprawia, że renderowanie danych XML i JSON jest bardzo łatwe.
      Kontroler wygenerowany przez scaffolding posiada pokazujące to metody. Nie stosuje
      się tu konwersji "@users.to_xml". Jeżeli obiekt nie jest stringiem RoR automatycznie
      wywoła metodę to_xml.
    </p>
  </li>
  
  <li>
    <p>
      Filtry to metody uruchamiane przed, po lub wokół akcji kontrolera. Są dziedziczone co
      oznacza że ustawienie filtra w ApplicationController spowoduje jego działanie dla
      wszystkich kontrolerów w aplikacji. Filtry "before" mogą zatrzymać cykl requestów.
      Jednym z popularnych filtrów "before" jest ten, który sprawdza czy użytkownik jest
      zalogowany przed uruchomieniem jakiejś akcji. Można użyć "before_action :require_login"
      w kontrolerze. Metoda przechowuje wiadomość we flashu i przekierowuje użytkownika w
      odpowiednie miejsce. Akcja i pozostałe filtry nie zostaną włączone. W podanym przykładzie
      filtr jest dodany do ApplicationController i wszystkie inne kontrolery dziedziczą go.
      Aby użytkownik mógł korzystać z aplikacji musi być zalogowany. Nie wszystkie kontrolery
      i akcje powinny tego wymagać(dostępna powinna być np strona logowania lub rejestracji).
      Można ominąć ten filtr przed poszczególnymi akcjami używając skip_before_action. Teraz
      metody new i create będą działać bez konieczności logowania użytkownika. Można używać
      opcji only wskazującej akcje lub except, która wyklucza określone metody. Wywoływanie
      tego samego filtra wiele razy z różnymi opcjami nie zadziała, ponieważ ostatnia definicja
      filtra nadpisze poprzednie. Poza filtrami "before" można też uruchamiać filtry po akcji,
      która miała miejsce. Można je też włączyć w obu momentach. Filtry "after" są podobne do
      "before". Mają jednak dostęp do danych odpowiedzi, która ma być wysłana do użytkownika.
      Filtry "after" nie mogą zatrzymać akcji, są uruchamiane po tym gdy się powiodła. Jeśli
      w cyklu requestów zostanie wygenerowany błąd filtr after nie zadziała. Filtry around
      uruchamiają powiązane akcje przez yielding, podobnie jak ma to miejsce w przypadku
      middlewaru Rack. Na przykład na stronie gdzie zmiany mają approval workflow a administrator
      powinien mieć możliwość łatwego podglądu, można umieścić je w transakcji. Filter "around"
      wrapuje też rendering. Jeżeli podanym przykładzie widok czyta dane z bazy, zrobi to
      w obrębie transakcji i zaprezentuje dane w podglądzie. Można zrezygnować z yieldowania i
      zbudować response samodzielnie. W tym przypadku akcja nie zostanie uruchomiona. Zwykle
      filtrów używa się z prywatnymi metodami. Może je też stosować na 2 inne sposoby. Pierwszy
      to użycie bloku z metodami *_action. Blok otrzymuje kontroler jako parametr. W ten sposób
      filtr require_login może być zapisany w inaczej. W tym przypadku filtr musi używać send
      ponieważ metoda logged_in? jest prywadna a filtr nie działa w zasięgu kontrolera. Nie jest
      to zalecana metoda implementacji filtra, jednak w prostych przypadkach może być przydatna.
      Dla around_action, block yielduje w akcji. Drugi sposób stosowania filtrów to klasy.
      Przydają się one w skomplikowanych przypadkach, w których użycie 2 poprzednich metod
      byłoby zbyt trudne. Filtr logowania może być napisany z użyciem klas. Nie jest to jednak
      idealny przykład zastosowania tej metody. Klasa filtra musi posiadać metodę z nazwą taką
      jak nazwa filtra. Na przykład dla filtra before_action konieczna jest metoda before.
      Metoda around musi użyć yield do uruchomienia akcji.
    </p>
  </li>
  
  <li>
    <p>
      Cross-site request forgery to rodzaj ataku, w którym strona oszukuje użytkownika i sprawia,
      że wysyła on request do innej strony dodając modyfikując lub usuwając dane bez swojej wiedzy
      lub pozwolenia. Pierwszym krokiem do zabezpieczenia przed tego typu atakiem jest ustawienie
      wszystkich destrukcyjnych akcjina requesty inne niż GET. Jeżeli stosuje się konwencję
      REST ten warunek jest już spełniony. Mimo to złośliwa strona nadal może stosunkowo łatwo
      wysłać requesty non-GET. Aby się przed tym zabezpieczyć, stosowana jest ochrona request
      forgery protection. Jak wskazuje jej nazwa chroni przed podrobionymi requestami. Do każdego
      requesta dodawany jest tajny token znany jedynie serwerowi. W ten sposób, jeżeli request
      przychodzi bez poprawnego tokenu, nastąpi odmowa dostępu. Token dodawany jest do formularza
      wygenerowanego przez form helpery jako ukryte pole i przez większość czasu nie trzeba zwracać
      na niego uwagi. Jeżeli formularz tworzony jest ręcznie lub token musi być dodany z innego
      powodu, można go uzyskać dzięki metodzie form_authenticity_token. Generuje ona prawidłowy
      token uwierzytelniania. Jest to przydatne w miejscach gdzie RoR nie dodaje go automatycznie,
      np we własnch wywołaniach Ajax. Więcej informacji na temat bezpieczeństwa aplikacji można
      znaleźć w przewodniku Security Guide.
    </p>
  </li>
  
  <li>
    <p>
      10 The Request and Response Objects
      ...
    </p>
  </li>


</ul>
