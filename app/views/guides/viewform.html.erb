<h2>Action View Form Helpers</h2>

<ul>

  <li>
    <p>
      Główny form helper to funkcja form_with bez argumentów. Wygenerowany formularz posiada ukryte
      pole i authenticity_token. Przy pomocy tej funkcji i tag helperów można utworzyć prosty formularz
      wyszukiwania. Popularne helpery to między innymi checkboxy, radio buttony, pola tekstowe,
      pola z hasłami, kolorami, datami itp.
    </p>
  </li>
  
  <li>
    <p>
      Istnieją też helpery tworzące formularze dla modeli - "text_field(:person, :name)". Można też
      zbindować formularz i model używając metody form_with :model. W podobny sposób można użyć
      metody fields_for, na przykład dla powiązanych modeli. Funkcja form_with jest w stanie
      wygenerować formularz na podstawie dostarczonego obiektu. Ścieżki z przestrzeni nazw mogą
      być obsługiwane dzięki przekazaniu opcji :model odpowiednich wartości. Specjalne requesty są
      emulowane dzięki ukrytemu polu _method.
    </p>
  </li>
  
  <li>
    <p>
      Dzięki helperom można w łatwy sposób tworzyć select boxy. Wystarczy użyć funkcji select_tag.
      Opcje mogą posiadać dowolne atrybuty, których wartości przekazywane są jako hashe. Select boxy
      działają również z modelami. Użytecznymi helperami są options_from_collection_for_select
      generujący opcje na podstawie listy obiektów i collection_select tworzący odpowiedniego select
      boxa. Helper time_zone_select pozwala użytkownikowi na wybranie strefy czasowej.
    </p>
  </li>
  
  <li>
    <p>
      Helpery select pozwalają na wygenerowanie tagów związanych z wyborem daty. Podobnym helperem
      przeznaczonym do pracy z modelami jest date_select. Opcje :start_year i :end_year ustawiają
      zakres dostępnych dat. Metoda select_date powinna być stosowana jeśli generowane treści nie
      mają związku z modelami. Do wyświetlania pojedynczych wartości służą metody takie jak select_day,
      select_hour, select_year itp.
    </p>
  </li>
  
  <li>
    <p>
      Podczas uploadowania plików atrybut enctype musi być ustawiony na wartość "multipart/form-data".
      Użycie form_with z parametrem model sprawia, że jest to ustawiane automatycznie. W przeciwnym
      razie należy odpowiednią opcję wybrać samodzielnie. RoR posiada helpery związane z uploadem
      plików. Są to file_field_tag i file_field. W późniejszych operacjach na uploadowanych plikach
      pomocne jest Active Storage.
    </p>
  </li>
  
  <li>
    <p>
      Możliwe jest tworzenie własnych Form Builderów dziedziczących po klasie FormBuilder. Mogą one
      zawierać własne metody helperów np text_field. W przypadku częstego korzystania z buildera
      dobrze jest stworzyć funkcję wykonującą automatycznie potrzebne działania. Z builderów można
      korzystać również podczas wywołań metody render.
    </p>
  </li>
  
  <li>
    <p>
      Struktura hasha z parametrami odpowiada nazwom zmiennych używanych w tagach. Możliwe jest ich
      dowolne zagnieżdżanie. RoR zwykle ignoruje zduplikowane nazwy parametrów. Aby to zmienić należy
      na końcu nazwy pola dodać parę nawiasów kwadratowych. Spowoduje to umieszczenie wartośći z pól
      w jednej tablicy. Wymienione cechy można łączyć tworząc na przykład tablicę hashów. Nie powinno
      stosować się parametrów tablicowych w połączeniu z helperem check_box. Do generowania formularzy
      służą metody form_with i fields_for oraz opcja :index.
    </p>
  </li>
  
  <li>
    <p>
      Form helpery pozwalają na wysyłanie danych do zewnętrznych zasobów. W tym przypadku może być
      konieczne ustawienie wartości authenticity_token helperowi form_with. Jeżeli nie należy tego
      robić powinna zostać wybrana opcja false.
    </p>
  </li>
  
  <li>
    <p>
      Podczas budowania skomplikowanych formularzy przydatna może sie okazać metoda Active Record
      accept_nested_attributes_for. Pozwala ona na tworzenie aktualizowanie i usuwanie odpowiednich
      wartości. Przed modyfikowaniem pól należy zadeklarować parametry jako dozwolone. Opcja
      :allow_destroy pozwala na usuwanie powiązanych obiektów a :reject_if ignoruje pola, które nie
      zostały wypełnione przez użytkownika. RoR nie posiada helperów pozwalających na dynamiczne
      dodawanie pól formularza.
    </p>
  </li>
  
  <li>
    <p>
      Funkcje form_tag i form_for zostały zastąpione przez form_with i są uznawane za przestarzałe.
      Informacje na ich temat można znaleźć w poprzednych wersjach przewodnika.
    </p>
  </li>
  
  
  
</ul>
